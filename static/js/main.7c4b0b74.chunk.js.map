{"version":3,"sources":["components/screens/Board/Tile.js","components/screens/Board/TileRow.js","components/universal/StyledButton/StyledButton.js","components/screens/Board/BoardLogic.js","components/screens/Board/Board.js","components/screens/Instruction/Instruction.js","App.js","index.js"],"names":["Tile","memo","color","onClick","className","style","background","TileRow","row","rowNumber","map","entry","index","key","StyledButton","text","initBoard","rows","columns","setHistory","i","push","board","manageColor","colorAmount","colors","indexOf","changeTile","column","updateHistory","tempBoard","length","checkWin","win","first","j","Board","useState","history","hasWon","setHasWon","setRows","setColumns","setColorAmount","localHistory","handelChange","setTimeout","handleUndo","tempHistory","pop","undoMove","handleShuffle","shuffleBoard","shuffles","Math","floor","random","useEffect","placeholder","value","onChange","e","handleRows","target","type","min","max","handleColumns","handleColorAmount","Instruction","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c4b0b74.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\nimport './Tile.css'\r\n\r\nfunction _Tile({ color, onClick }) {\r\n  return (\r\n    <div\r\n      className='tile'\r\n      style={{ background: color }}\r\n      onClick={() => onClick()}></div>\r\n  )\r\n}\r\n\r\nexport const Tile = memo(_Tile)\r\n","import React, { memo } from 'react'\r\nimport './TileRow.css'\r\nimport { Tile } from './Tile'\r\n\r\nfunction _TileRow({ row, rowNumber, onClick }) {\r\n  return (\r\n    <div className='tile-row-wrapper'>\r\n      {row.map((entry, index) => (\r\n        <Tile\r\n          color={entry}\r\n          onClick={() => onClick(rowNumber, index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport const TileRow = memo(_TileRow)\r\n","import React, { memo } from 'react'\r\nimport './StyledButton.css'\r\nfunction _StyledButton({ text, onClick, style }) {\r\n  return (\r\n    <div className='styled-button' style={style} onClick={() => onClick()}>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledButton = memo(_StyledButton)\r\n","export function initBoard(rows, columns, color, setHistory) {\r\n  let row = []\r\n  for (let i = 0; i < columns; i++) {\r\n    row.push(color)\r\n  }\r\n  let board = []\r\n  for (let i = 0; i < rows; i++) {\r\n    //...row copies row otherwise shallow copy\r\n    board.push([...row])\r\n  }\r\n\r\n  setHistory([board])\r\n}\r\n\r\nexport function manageColor(color, colorAmount, colors) {\r\n  const index = colors.indexOf(color)\r\n  return colors[(index + 1) % colorAmount]\r\n}\r\nexport function changeTile(\r\n  row,\r\n  column,\r\n  board,\r\n  colorAmount,\r\n  colors,\r\n  updateHistory,\r\n) {\r\n  //deep copy of board\r\n  const tempBoard = [...board]\r\n  const columns = tempBoard[0].length\r\n  const rows = tempBoard.length\r\n  tempBoard[row][column] = manageColor(\r\n    tempBoard[row][column],\r\n    colorAmount,\r\n    colors,\r\n  )\r\n\r\n  if (row - 1 >= 0) {\r\n    tempBoard[row - 1][column] = manageColor(\r\n      tempBoard[row - 1][column],\r\n      colorAmount,\r\n      colors,\r\n    )\r\n  }\r\n  if (row + 1 < rows) {\r\n    tempBoard[row + 1][column] = manageColor(\r\n      tempBoard[row + 1][column],\r\n      colorAmount,\r\n      colors,\r\n    )\r\n  }\r\n  if (column - 1 >= 0) {\r\n    tempBoard[row][column - 1] = manageColor(\r\n      tempBoard[row][column - 1],\r\n      colorAmount,\r\n      colors,\r\n    )\r\n  }\r\n  if (column + 1 < columns) {\r\n    tempBoard[row][column + 1] = manageColor(\r\n      tempBoard[row][column + 1],\r\n      colorAmount,\r\n      colors,\r\n    )\r\n  }\r\n  updateHistory(tempBoard)\r\n}\r\n\r\nexport function shuffleBoard(\r\n  shuffles,\r\n  board,\r\n  rows,\r\n  columns,\r\n  history,\r\n  colorAmount,\r\n  colors,\r\n  updateHistory,\r\n) {\r\n  //click randomly  tiles\r\n  const tempBoard = board.map(row => [...row])\r\n  for (let i = 0; i < shuffles; i++) {\r\n    let randomRow = Math.floor(Math.random() * rows)\r\n    let randomColumn = Math.floor(Math.random() * columns)\r\n    changeTile(\r\n      randomRow,\r\n      randomColumn,\r\n      tempBoard,\r\n      colorAmount,\r\n      colors,\r\n      updateHistory,\r\n    )\r\n  }\r\n  //prevent case that it shuffles to the goal\r\n  //theoretically infinite recursion\r\n  if (checkWin(board, rows, columns)) {\r\n    shuffleBoard(\r\n      shuffles,\r\n      tempBoard,\r\n      rows,\r\n      columns,\r\n      history,\r\n      colorAmount,\r\n      colors,\r\n      updateHistory,\r\n    )\r\n  }\r\n  updateHistory(tempBoard)\r\n}\r\n\r\nexport function undoMove(history, setHistory) {\r\n  //removes current board from history\r\n  if (history.length - 1 > 0) {\r\n    let tempHistory = history\r\n    tempHistory.pop()\r\n    setHistory([...tempHistory])\r\n  }\r\n}\r\n\r\nexport function checkWin(board, rows, columns) {\r\n  //simple win check\r\n  let win = true\r\n  const first = board[0][0]\r\n  for (let i = 0; i < rows && win; i++) {\r\n    for (let j = 0; j < columns && win; j++) {\r\n      win = first === board[i][j] ? true : false\r\n    }\r\n  }\r\n  return win\r\n}\r\n","import React, { memo, useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport { TileRow } from './TileRow'\r\nimport { StyledButton } from '../../universal/StyledButton/StyledButton'\r\nimport {\r\n  initBoard,\r\n  changeTile,\r\n  checkWin,\r\n  undoMove,\r\n  shuffleBoard,\r\n} from './BoardLogic'\r\n//TODO: win condition with reduce or filter\r\n//TODO: maybe switch to redux\r\nfunction _Board() {\r\n  const [history, setHistory] = useState([[]])\r\n  const [hasWon, setHasWon] = useState(false)\r\n  const [rows, setRows] = useState(3)\r\n  const [columns, setColumns] = useState(3)\r\n  const [colorAmount, setColorAmount] = useState(3)\r\n  //deep deep copy of current board\r\n  let board = history[history.length - 1].map(row => [...row])\r\n\r\n  // const colors = ['#7800ff', '#FF7800', '#00FF78'].slice(0, colorAmount)\r\n  const palettes = [\r\n    ['#CE3141', '#31CEBE'],\r\n    ['#7800ff', '#FF7800', '#00FF78'],\r\n    ['#66D926', '#26BFD9', '#9926D9', '#D94026'],\r\n  ]\r\n  let colors = palettes[colorAmount - 2]\r\n\r\n  function updateHistory(board) {\r\n    const localHistory = [...history, board]\r\n    setHistory(localHistory)\r\n  }\r\n\r\n  useEffect(() => {\r\n    initBoard(rows, columns, colors[0], setHistory)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [columns, rows, colorAmount, hasWon])\r\n\r\n  /* handleFunctions are the only non pure functions due to amount of parameter*/\r\n  function handelChange(row, column) {\r\n    changeTile(row, column, board, colorAmount, colors, updateHistory)\r\n\r\n    const win = checkWin(board, rows, columns)\r\n    if (win) {\r\n      //flashes the background green and removes it afterwards\r\n      setHasWon(true)\r\n      setTimeout(() => setHasWon(false), 1000)\r\n    }\r\n  }\r\n  function handleRows(rows) {\r\n    setRows(rows)\r\n  }\r\n  function handleColumns(columns) {\r\n    setColumns(columns)\r\n  }\r\n  function handleColorAmount(colorAmount) {\r\n    setColorAmount(colorAmount)\r\n  }\r\n  function handleUndo() {\r\n    undoMove(history, setHistory)\r\n  }\r\n  function handleShuffle(shuffleAmount = 20) {\r\n    shuffleBoard(\r\n      shuffleAmount,\r\n      board,\r\n      rows,\r\n      columns,\r\n      history,\r\n      colorAmount,\r\n      colors,\r\n      updateHistory,\r\n    )\r\n  }\r\n  function handleReset() {\r\n    initBoard(rows, columns, colors[0], setHistory)\r\n  }\r\n\r\n  return (\r\n    <div className='board-wrapper'>\r\n      <div className='control-wrapper'>\r\n        <StyledButton\r\n          text={hasWon ? 'You did it!' : 'Shuffle'}\r\n          onClick={() => handleShuffle()}\r\n        />\r\n        <StyledButton text={'Undo'} onClick={() => handleUndo()} />\r\n        <StyledButton text={'Reset'} onClick={() => handleReset()} />\r\n        <div className='input-wrapper'>\r\n          <label>\r\n            Rows:\r\n            <input\r\n              placeholder='Rows'\r\n              value={rows}\r\n              onChange={e => handleRows(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns:{' '}\r\n            <input\r\n              placeholder='Columns'\r\n              value={columns}\r\n              onChange={e => handleColumns(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Colors:\r\n            <input\r\n              placeholder='Colors'\r\n              value={colorAmount}\r\n              onChange={e => handleColorAmount(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='4'\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div className={`board ${hasWon ? 'bg-green' : ''}`}>\r\n        {board.map((row, index) => (\r\n          <TileRow\r\n            rowNumber={index}\r\n            row={row}\r\n            onClick={handelChange}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Board = memo(_Board)\r\n","import React, { memo } from 'react'\r\nimport './Instruction.css'\r\nfunction _Instruction() {\r\n  return (\r\n    <div className='instruction-wrapper'>\r\n      <h2 className='instruction-header'>How to Play</h2>\r\n      <ul className='rules'>\r\n        <li>The goal of the game is to match the colors of all tiles</li>\r\n        <li>Click on each tile and the adjacent ones to change color</li>\r\n        <li>\r\n          Each change in color is following a determined order based on the\r\n          amount of chosen colors\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Instruction = memo(_Instruction)\r\n","import React, { memo } from 'react'\nimport './App.css'\nimport { Board } from './components/screens/Board/Board'\nimport { Instruction } from './components/screens/Instruction/Instruction'\nfunction _App() {\n  return (\n    <div className='app-wrapper'>\n      <Board /> <Instruction />\n    </div>\n  )\n}\n\nexport const App = memo(_App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}