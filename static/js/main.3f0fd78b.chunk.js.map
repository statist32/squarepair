{"version":3,"sources":["components/screens/Board/Tile.js","components/screens/Board/TileRow.js","components/universal/StyledButton/StyledButton.js","components/screens/Board/Board.js","components/screens/Instruction/Instruction.js","App.js","index.js"],"names":["Tile","memo","color","onClick","className","style","background","TileRow","row","rowNumber","map","entry","index","key","StyledButton","text","Board","useState","history","setHistory","hasWon","setHasWon","rows","setRows","columns","setColumns","colors","setColors","board","length","initBoard","i","push","manageColor","changeTile","column","tempBoard","localHistory","updateHistory","checkWin","win","first","j","handelChange","setTimeout","useEffect","shuffleBoard","shuffles","Math","floor","random","tempHistory","pop","undoMove","placeholder","value","onChange","e","target","type","min","max","Instruction","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f0fd78b.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\nimport './Tile.css'\r\n\r\nfunction _Tile({ color, onClick }) {\r\n  return (\r\n    <div\r\n      className='tile'\r\n      style={{ background: color }}\r\n      onClick={() => onClick()}></div>\r\n  )\r\n}\r\n\r\nexport const Tile = memo(_Tile)\r\n","import React, { memo } from 'react'\r\nimport './TileRow.css'\r\nimport { Tile } from './Tile'\r\n\r\nfunction _TileRow({ row, rowNumber, onClick }) {\r\n  return (\r\n    <div className='tile-row-wrapper'>\r\n      {row.map((entry, index) => (\r\n        <Tile\r\n          color={entry}\r\n          onClick={() => onClick(rowNumber, index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport const TileRow = memo(_TileRow)\r\n","import React, { memo } from 'react'\r\nimport './StyledButton.css'\r\nfunction _StyledButton({ text, onClick, style }) {\r\n  return (\r\n    <div className='styled-button' style={style} onClick={() => onClick()}>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledButton = memo(_StyledButton)\r\n","import React, { memo, useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport { TileRow } from './TileRow'\r\nimport { StyledButton } from '../../universal/StyledButton/StyledButton'\r\n//TODO: win condition with reduce or filter\r\n//TODO: maybe switch to redux\r\nfunction _Board() {\r\n  const [history, setHistory] = useState([[]])\r\n  const [hasWon, setHasWon] = useState(false)\r\n  const [rows, setRows] = useState(3)\r\n  const [columns, setColumns] = useState(3)\r\n  const [colors, setColors] = useState(3)\r\n  //deep deep copy of current board\r\n  let board = history[history.length - 1].map(row => [...row])\r\n\r\n  function updateHistory(tempBoard) {\r\n    const localHistory = [...history, tempBoard]\r\n    setHistory(localHistory)\r\n  }\r\n\r\n  useEffect(() => {\r\n    initBoard(rows, columns)\r\n  }, [columns, rows])\r\n\r\n  function initBoard(rows, columns) {\r\n    let row = []\r\n    for (let i = 0; i < columns; i++) {\r\n      row.push('#7800ff')\r\n    }\r\n    let board = []\r\n    for (let i = 0; i < rows; i++) {\r\n      //...row copies row otherwise shallow copy\r\n      board.push([...row])\r\n    }\r\n\r\n    setHistory([board])\r\n  }\r\n\r\n  function manageColor(color) {\r\n    switch (color) {\r\n      case '#7800ff':\r\n        return '#FF7800'\r\n      case '#FF7800':\r\n        return '#00FF78'\r\n      case '#00FF78':\r\n        return '#7800ff'\r\n\r\n      default:\r\n        return 'transparent'\r\n    }\r\n  }\r\n  function changeTile(row, column) {\r\n    //deep copy of board\r\n    const tempBoard = [...board]\r\n    const columns = tempBoard[0].length\r\n    const rows = tempBoard.length\r\n    tempBoard[row][column] = manageColor(tempBoard[row][column])\r\n\r\n    if (row - 1 >= 0) {\r\n      tempBoard[row - 1][column] = manageColor(tempBoard[row - 1][column])\r\n    }\r\n    if (row + 1 < rows) {\r\n      tempBoard[row + 1][column] = manageColor(tempBoard[row + 1][column])\r\n    }\r\n    if (column - 1 >= 0) {\r\n      tempBoard[row][column - 1] = manageColor(tempBoard[row][column - 1])\r\n    }\r\n    if (column + 1 < columns) {\r\n      tempBoard[row][column + 1] = manageColor(tempBoard[row][column + 1])\r\n    }\r\n\r\n    updateHistory(tempBoard)\r\n  }\r\n\r\n  function shuffleBoard(shuffles) {\r\n    //click randomly  tiles\r\n    for (let i = 0; i < shuffles; i++) {\r\n      let randomRow = Math.floor(Math.random() * rows)\r\n      let randomColumn = Math.floor(Math.random() * columns)\r\n      changeTile(randomRow, randomColumn)\r\n    }\r\n    //prevent case that it shuffles to the goal\r\n    //theoretically infinite recursion\r\n    if (checkWin()) {\r\n      shuffleBoard(shuffles)\r\n    }\r\n  }\r\n\r\n  function undoMove() {\r\n    //removes current board from history\r\n    if (history.length - 1 > 0) {\r\n      let tempHistory = history\r\n      tempHistory.pop()\r\n      setHistory([...tempHistory])\r\n    }\r\n  }\r\n\r\n  function checkWin() {\r\n    //simple win check\r\n    let win = true\r\n    const first = board[0][0]\r\n    for (let i = 0; i < rows && win; i++) {\r\n      for (let j = 0; j < columns && win; j++) {\r\n        win = first === board[i][j] ? true : false\r\n      }\r\n    }\r\n    return win\r\n  }\r\n  function handelChange(row, column) {\r\n    changeTile(row, column)\r\n    const win = checkWin()\r\n    if (win) {\r\n      //flashes the background green and removes it afterwards\r\n      setHasWon(true)\r\n      setTimeout(() => setHasWon(false), 1000)\r\n      //delete history of last game to save memory and prevent undo\r\n      initBoard(rows, columns)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='board-wrapper'>\r\n      <div className='control-wrapper'>\r\n        <StyledButton\r\n          text={hasWon ? 'You did it!' : 'Shuffle'}\r\n          onClick={() => shuffleBoard(20)}\r\n        />\r\n        <StyledButton text={'Undo'} onClick={() => undoMove()} />\r\n        <StyledButton text={'Reset'} onClick={() => initBoard(rows, columns)} />\r\n        <div className='input-wrapper'>\r\n          <label>\r\n            Rows:\r\n            <input\r\n              placeholder='Rows'\r\n              value={rows}\r\n              onChange={e => setRows(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns:{' '}\r\n            <input\r\n              placeholder='Columns'\r\n              value={columns}\r\n              onChange={e => setColumns(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Colors:\r\n            <input\r\n              placeholder='Colors'\r\n              value={colors}\r\n              onChange={e => setColors(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div className={`board ${hasWon ? 'bg-green' : ''}`}>\r\n        {board.map((row, index) => (\r\n          <TileRow\r\n            rowNumber={index}\r\n            row={row}\r\n            onClick={handelChange}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Board = memo(_Board)\r\n","import React, { memo } from 'react'\r\nimport './Instruction.css'\r\nfunction _Instruction() {\r\n  return (\r\n    <div className='instruction-wrapper'>\r\n      <h2 className='instruction-header'>How to Play</h2>\r\n      <ul className='rules'>\r\n        <li>The goal of the game is to match the colors of all tiles</li>\r\n        <li>Click on each tile and the adjacent ones to change color</li>\r\n        <li>\r\n          Each change in color is following a determined order based on the\r\n          amount of chosen colors\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Instruction = memo(_Instruction)\r\n","import React, { memo } from 'react'\nimport './App.css'\nimport { Board } from './components/screens/Board/Board'\nimport { Instruction } from './components/screens/Instruction/Instruction'\nfunction _App() {\n  return (\n    <div className='app-wrapper'>\n      <Board /> <Instruction />\n    </div>\n  )\n}\n\nexport const App = memo(_App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}