{"version":3,"sources":["components/screens/Board/Tile.js","components/screens/Board/TileRow.js","components/universal/StyledButton/StyledButton.js","components/screens/Board/Board.js","components/screens/Instruction/Instruction.js","App.js","index.js"],"names":["Tile","memo","color","onClick","className","style","background","TileRow","row","rowNumber","map","entry","index","key","StyledButton","text","Board","useState","history","setHistory","hasWon","setHasWon","rows","setRows","columns","setColumns","colorAmount","setColorAmount","board","length","palettes","colors","initBoard","i","push","manageColor","console","log","indexOf","changeTile","column","tempBoard","localHistory","updateHistory","checkWin","win","first","j","handelChange","setTimeout","useEffect","shuffleBoard","shuffles","Math","floor","random","tempHistory","pop","undoMove","placeholder","value","onChange","e","handleRows","target","type","min","max","handleColumns","handleColors","Instruction","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dc797d9.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\nimport './Tile.css'\r\n\r\nfunction _Tile({ color, onClick }) {\r\n  return (\r\n    <div\r\n      className='tile'\r\n      style={{ background: color }}\r\n      onClick={() => onClick()}></div>\r\n  )\r\n}\r\n\r\nexport const Tile = memo(_Tile)\r\n","import React, { memo } from 'react'\r\nimport './TileRow.css'\r\nimport { Tile } from './Tile'\r\n\r\nfunction _TileRow({ row, rowNumber, onClick }) {\r\n  return (\r\n    <div className='tile-row-wrapper'>\r\n      {row.map((entry, index) => (\r\n        <Tile\r\n          color={entry}\r\n          onClick={() => onClick(rowNumber, index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport const TileRow = memo(_TileRow)\r\n","import React, { memo } from 'react'\r\nimport './StyledButton.css'\r\nfunction _StyledButton({ text, onClick, style }) {\r\n  return (\r\n    <div className='styled-button' style={style} onClick={() => onClick()}>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledButton = memo(_StyledButton)\r\n","import React, { memo, useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport { TileRow } from './TileRow'\r\nimport { StyledButton } from '../../universal/StyledButton/StyledButton'\r\n//TODO: win condition with reduce or filter\r\n//TODO: maybe switch to redux\r\nfunction _Board() {\r\n  const [history, setHistory] = useState([[]])\r\n  const [hasWon, setHasWon] = useState(false)\r\n  const [rows, setRows] = useState(3)\r\n  const [columns, setColumns] = useState(3)\r\n  const [colorAmount, setColorAmount] = useState(3)\r\n  //deep deep copy of current board\r\n  let board = history[history.length - 1].map(row => [...row])\r\n\r\n  // const colors = ['#7800ff', '#FF7800', '#00FF78'].slice(0, colorAmount)\r\n  const palettes = [\r\n    ['#CE3141', '#31CEBE'],\r\n    ['#7800ff', '#FF7800', '#00FF78'],\r\n    ['#66D926', '#26BFD9', '#9926D9', '#D94026'],\r\n  ]\r\n  let colors = palettes[colorAmount - 2]\r\n\r\n  function updateHistory(tempBoard) {\r\n    const localHistory = [...history, tempBoard]\r\n    setHistory(localHistory)\r\n  }\r\n\r\n  useEffect(() => {\r\n    initBoard(rows, columns)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [columns, rows])\r\n\r\n  function initBoard(rows, columns) {\r\n    let row = []\r\n    for (let i = 0; i < columns; i++) {\r\n      row.push(colors[0])\r\n    }\r\n    let board = []\r\n    for (let i = 0; i < rows; i++) {\r\n      //...row copies row otherwise shallow copy\r\n      board.push([...row])\r\n    }\r\n\r\n    setHistory([board])\r\n  }\r\n\r\n  function manageColor(color) {\r\n    console.log(colors)\r\n    const index = colors.indexOf(color)\r\n    return colors[(index + 1) % colorAmount]\r\n  }\r\n  function changeTile(row, column) {\r\n    //deep copy of board\r\n    const tempBoard = [...board]\r\n    const columns = tempBoard[0].length\r\n    const rows = tempBoard.length\r\n    tempBoard[row][column] = manageColor(tempBoard[row][column])\r\n\r\n    if (row - 1 >= 0) {\r\n      tempBoard[row - 1][column] = manageColor(tempBoard[row - 1][column])\r\n    }\r\n    if (row + 1 < rows) {\r\n      tempBoard[row + 1][column] = manageColor(tempBoard[row + 1][column])\r\n    }\r\n    if (column - 1 >= 0) {\r\n      tempBoard[row][column - 1] = manageColor(tempBoard[row][column - 1])\r\n    }\r\n    if (column + 1 < columns) {\r\n      tempBoard[row][column + 1] = manageColor(tempBoard[row][column + 1])\r\n    }\r\n\r\n    updateHistory(tempBoard)\r\n  }\r\n\r\n  function shuffleBoard(shuffles) {\r\n    //click randomly  tiles\r\n    for (let i = 0; i < shuffles; i++) {\r\n      let randomRow = Math.floor(Math.random() * rows)\r\n      let randomColumn = Math.floor(Math.random() * columns)\r\n      changeTile(randomRow, randomColumn)\r\n    }\r\n    //prevent case that it shuffles to the goal\r\n    //theoretically infinite recursion\r\n    if (checkWin()) {\r\n      shuffleBoard(shuffles)\r\n    }\r\n  }\r\n\r\n  function undoMove() {\r\n    //removes current board from history\r\n    if (history.length - 1 > 0) {\r\n      let tempHistory = history\r\n      tempHistory.pop()\r\n      setHistory([...tempHistory])\r\n    }\r\n  }\r\n\r\n  function checkWin() {\r\n    //simple win check\r\n    let win = true\r\n    const first = board[0][0]\r\n    for (let i = 0; i < rows && win; i++) {\r\n      for (let j = 0; j < columns && win; j++) {\r\n        win = first === board[i][j] ? true : false\r\n      }\r\n    }\r\n    return win\r\n  }\r\n  function handelChange(row, column) {\r\n    changeTile(row, column)\r\n    const win = checkWin()\r\n    if (win) {\r\n      //flashes the background green and removes it afterwards\r\n      setHasWon(true)\r\n      setTimeout(() => setHasWon(false), 1000)\r\n      //delete history of last game to save memory and prevent undo\r\n      initBoard(rows, columns)\r\n    }\r\n  }\r\n  function handleRows(rows) {\r\n    setRows(rows)\r\n    initBoard(rows, columns)\r\n  }\r\n  function handleColumns(columns) {\r\n    setColumns(columns)\r\n    initBoard(rows, columns)\r\n  }\r\n  function handleColors(colorAmount) {\r\n    setColorAmount(colorAmount)\r\n    colors = palettes[colorAmount - 2]\r\n    initBoard(rows, columns)\r\n  }\r\n\r\n  return (\r\n    <div className='board-wrapper'>\r\n      <div className='control-wrapper'>\r\n        <StyledButton\r\n          text={hasWon ? 'You did it!' : 'Shuffle'}\r\n          onClick={() => shuffleBoard(20)}\r\n        />\r\n        <StyledButton text={'Undo'} onClick={() => undoMove()} />\r\n        <StyledButton text={'Reset'} onClick={() => initBoard(rows, columns)} />\r\n        <div className='input-wrapper'>\r\n          <label>\r\n            Rows:\r\n            <input\r\n              placeholder='Rows'\r\n              value={rows}\r\n              onChange={e => handleRows(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Columns:{' '}\r\n            <input\r\n              placeholder='Columns'\r\n              value={columns}\r\n              onChange={e => handleColumns(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='10'\r\n            />\r\n          </label>\r\n          <label>\r\n            Colors:\r\n            <input\r\n              placeholder='Colors'\r\n              value={colorAmount}\r\n              onChange={e => handleColors(e.target.value)}\r\n              type='number'\r\n              min='2'\r\n              max='4'\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div className={`board ${hasWon ? 'bg-green' : ''}`}>\r\n        {board.map((row, index) => (\r\n          <TileRow\r\n            rowNumber={index}\r\n            row={row}\r\n            onClick={handelChange}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Board = memo(_Board)\r\n","import React, { memo } from 'react'\r\nimport './Instruction.css'\r\nfunction _Instruction() {\r\n  return (\r\n    <div className='instruction-wrapper'>\r\n      <h2 className='instruction-header'>How to Play</h2>\r\n      <ul className='rules'>\r\n        <li>The goal of the game is to match the colors of all tiles</li>\r\n        <li>Click on each tile and the adjacent ones to change color</li>\r\n        <li>\r\n          Each change in color is following a determined order based on the\r\n          amount of chosen colors\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Instruction = memo(_Instruction)\r\n","import React, { memo } from 'react'\nimport './App.css'\nimport { Board } from './components/screens/Board/Board'\nimport { Instruction } from './components/screens/Instruction/Instruction'\nfunction _App() {\n  return (\n    <div className='app-wrapper'>\n      <Board /> <Instruction />\n    </div>\n  )\n}\n\nexport const App = memo(_App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}