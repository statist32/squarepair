{"version":3,"sources":["components/screens/Board/Tile.js","components/screens/Board/TileRow.js","components/universal/StyledButton/StyledButton.js","components/screens/Board/Board.js","components/screens/Instruction/Instruction.js","App.js","index.js"],"names":["Tile","memo","color","onClick","className","style","background","TileRow","row","rowNumber","map","entry","index","key","StyledButton","text","Board","columns","rows","useState","history","setHistory","hasWon","setHasWon","board","length","initBoard","i","push","manageColor","changeTile","column","tempBoard","localHistory","updateHistory","checkWin","setTimeout","win","first","j","useEffect","shuffleBoard","shuffles","Math","floor","random","tempHistory","pop","undoMove","Instruction","App","ReactDOM","render","document","getElementById"],"mappings":"mVAYO,IAAMA,EAAOC,gBATpB,YAAoC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACtB,OACE,yBACEC,UAAU,OACVC,MAAO,CAAEC,WAAYJ,GACrBC,QAAS,kBAAMA,UCSd,IAAMI,EAAUN,gBAbvB,YAAgD,IAA5BO,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,UAAWN,EAAW,EAAXA,QAClC,OACE,yBAAKC,UAAU,oBACZI,EAAIE,KAAI,SAACC,EAAOC,GAAR,OACP,kBAAC,EAAD,CACEV,MAAOS,EACPR,QAAS,kBAAMA,EAAQM,EAAWG,IAClCC,IAAKD,W,MCDR,IAAME,EAAeb,gBAR5B,YAAkD,IAAzBc,EAAwB,EAAxBA,KAAMZ,EAAkB,EAAlBA,QAASE,EAAS,EAATA,MACtC,OACE,yBAAKD,UAAU,gBAAgBC,MAAOA,EAAOF,QAAS,kBAAMA,MACzDY,MCkIA,IAAMC,EAAQf,gBAlIrB,YAA4C,IAAD,IAAzBgB,eAAyB,MAAf,EAAe,MAAZC,YAAY,MAAL,EAAK,IACXC,mBAAS,CAAC,KADC,mBAClCC,EADkC,KACzBC,EADyB,OAEbF,oBAAS,GAFI,mBAElCG,EAFkC,KAE1BC,EAF0B,KAIrCC,EAAQJ,EAAQA,EAAQK,OAAS,GAAGf,KAAI,SAAAF,GAAG,mBAAQA,MAWvD,SAASkB,EAAUR,EAAMD,GAEvB,IADA,IAAIT,EAAM,GACDmB,EAAI,EAAGA,EAAIV,EAASU,IAC3BnB,EAAIoB,KAAK,WAGX,IADA,IAAIJ,EAAQ,GACHG,EAAI,EAAGA,EAAIT,EAAMS,IAExBH,EAAMI,KAAN,UAAepB,IAGjBa,EAAW,CAACG,IAGd,SAASK,EAAY3B,GACnB,OAAQA,GACN,IAAK,UACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,UACH,MAAO,UAET,QACE,MAAO,eAGb,SAAS4B,EAAWtB,EAAKuB,GAEvB,IAAMC,EAAS,YAAOR,GAChBP,EAAUe,EAAU,GAAGP,OACvBP,EAAOc,EAAUP,OACvBO,EAAUxB,GAAKuB,GAAUF,EAAYG,EAAUxB,GAAKuB,IAEhDvB,EAAM,GAAK,IACbwB,EAAUxB,EAAM,GAAGuB,GAAUF,EAAYG,EAAUxB,EAAM,GAAGuB,KAE1DvB,EAAM,EAAIS,IACZe,EAAUxB,EAAM,GAAGuB,GAAUF,EAAYG,EAAUxB,EAAM,GAAGuB,KAE1DA,EAAS,GAAK,IAChBC,EAAUxB,GAAKuB,EAAS,GAAKF,EAAYG,EAAUxB,GAAKuB,EAAS,KAE/DA,EAAS,EAAIb,IACfc,EAAUxB,GAAKuB,EAAS,GAAKF,EAAYG,EAAUxB,GAAKuB,EAAS,KArDrE,SAAuBC,GACrB,IAAMC,EAAY,sBAAOb,GAAP,CAAgBY,IAClCX,EAAWY,GAsDXC,CAAcF,GACFG,MAGVZ,GAAU,GACVa,YAAW,kBAAMb,GAAU,KAAQ,KAEnCG,EAAUR,EAAMD,IA2BpB,SAASkB,IAIP,IAFA,IAAIE,GAAM,EACJC,EAAQd,EAAM,GAAG,GACdG,EAAI,EAAGA,EAAIV,GAAWoB,EAAKV,IAClC,IAAK,IAAIY,EAAI,EAAGA,EAAIrB,GAAQmB,EAAKE,IAC/BF,EAAMC,IAAUd,EAAMG,GAAGY,GAG7B,OAAOF,EAET,OAhGAG,qBAAU,WACRd,EAAUR,EAAMD,KACf,CAACA,EAASC,IA+FX,yBAAKd,UAAU,iBACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEW,KAAMO,EAAS,cAAgB,UAC/BnB,QAAS,kBAvCjB,SAASsC,EAAaC,GAEpB,IAAK,IAAIf,EAAI,EAAGA,EAAIe,EAAUf,IAAK,CAGjCG,EAFgBa,KAAKC,MAAMD,KAAKE,SAAW3B,GACxByB,KAAKC,MAAMD,KAAKE,SAAW5B,IAK5CkB,KACFM,EAAaC,GA6BMD,CAAa,OAE9B,kBAAC,EAAD,CAAc1B,KAAM,OAAQZ,QAAS,kBA3B3C,WAEE,GAAIiB,EAAQK,OAAS,EAAI,EAAG,CAC1B,IAAIqB,EAAc1B,EAClB0B,EAAYC,MACZ1B,EAAW,YAAIyB,KAsB8BE,OAE7C,yBAAK5C,UAAS,gBAAWkB,EAAS,WAAa,KAC5CE,EAAMd,KAAI,SAACF,EAAKI,GAAN,OACT,kBAAC,EAAD,CACEH,UAAWG,EACXJ,IAAKA,EACLL,QAAS2B,EACTjB,IAAKD,Y,MC7GV,IAAMqC,EAAchD,gBAhB3B,WACE,OACE,yBAAKG,UAAU,uBACb,wBAAIA,UAAU,sBAAd,eACA,wBAAIA,UAAU,SACZ,wFACA,wFACA,8HCGD,IAAM8C,EAAMjD,gBARnB,WACE,OACE,yBAAKG,UAAU,eACb,kBAAC,EAAD,MADF,IACY,kBAAC,EAAD,UCHhB+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9d785090.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\nimport './Tile.css'\r\n\r\nfunction _Tile({ color, onClick }) {\r\n  return (\r\n    <div\r\n      className='tile'\r\n      style={{ background: color }}\r\n      onClick={() => onClick()}></div>\r\n  )\r\n}\r\n\r\nexport const Tile = memo(_Tile)\r\n","import React, { memo } from 'react'\r\nimport './TileRow.css'\r\nimport { Tile } from './Tile'\r\n\r\nfunction _TileRow({ row, rowNumber, onClick }) {\r\n  return (\r\n    <div className='tile-row-wrapper'>\r\n      {row.map((entry, index) => (\r\n        <Tile\r\n          color={entry}\r\n          onClick={() => onClick(rowNumber, index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport const TileRow = memo(_TileRow)\r\n","import React, { memo } from 'react'\r\nimport './StyledButton.css'\r\nfunction _StyledButton({ text, onClick, style }) {\r\n  return (\r\n    <div className='styled-button' style={style} onClick={() => onClick()}>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StyledButton = memo(_StyledButton)\r\n","import React, { memo, useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport { TileRow } from './TileRow'\r\nimport { StyledButton } from '../../universal/StyledButton/StyledButton'\r\n//TODO: win condition with reduce or filter\r\nfunction _Board({ columns = 3, rows = 3 }) {\r\n  const [history, setHistory] = useState([[]])\r\n  const [hasWon, setHasWon] = useState(false)\r\n  //deep deep copy of current board\r\n  let board = history[history.length - 1].map(row => [...row])\r\n\r\n  function updateHistory(tempBoard) {\r\n    const localHistory = [...history, tempBoard]\r\n    setHistory(localHistory)\r\n  }\r\n\r\n  useEffect(() => {\r\n    initBoard(rows, columns)\r\n  }, [columns, rows])\r\n\r\n  function initBoard(rows, columns) {\r\n    let row = []\r\n    for (let i = 0; i < columns; i++) {\r\n      row.push('#7800ff')\r\n    }\r\n    let board = []\r\n    for (let i = 0; i < rows; i++) {\r\n      //...row copys row otherwise shallow copy\r\n      board.push([...row])\r\n    }\r\n\r\n    setHistory([board])\r\n  }\r\n\r\n  function manageColor(color) {\r\n    switch (color) {\r\n      case '#7800ff':\r\n        return '#FF7800'\r\n      case '#FF7800':\r\n        return '#00FF78'\r\n      case '#00FF78':\r\n        return '#7800ff'\r\n\r\n      default:\r\n        return 'transparent'\r\n    }\r\n  }\r\n  function changeTile(row, column) {\r\n    //deep copy of board\r\n    const tempBoard = [...board]\r\n    const columns = tempBoard[0].length\r\n    const rows = tempBoard.length\r\n    tempBoard[row][column] = manageColor(tempBoard[row][column])\r\n\r\n    if (row - 1 >= 0) {\r\n      tempBoard[row - 1][column] = manageColor(tempBoard[row - 1][column])\r\n    }\r\n    if (row + 1 < columns) {\r\n      tempBoard[row + 1][column] = manageColor(tempBoard[row + 1][column])\r\n    }\r\n    if (column - 1 >= 0) {\r\n      tempBoard[row][column - 1] = manageColor(tempBoard[row][column - 1])\r\n    }\r\n    if (column + 1 < rows) {\r\n      tempBoard[row][column + 1] = manageColor(tempBoard[row][column + 1])\r\n    }\r\n\r\n    updateHistory(tempBoard)\r\n    const win = checkWin()\r\n    if (win) {\r\n      //flashes the background green and removes it afterwards\r\n      setHasWon(true)\r\n      setTimeout(() => setHasWon(false), 1000)\r\n      //delete history of last game to save memory and prevent undo\r\n      initBoard(rows, columns)\r\n    }\r\n  }\r\n\r\n  function shuffleBoard(shuffles) {\r\n    //click randomly  tiles\r\n    for (let i = 0; i < shuffles; i++) {\r\n      let randomRow = Math.floor(Math.random() * rows)\r\n      let randomColumn = Math.floor(Math.random() * columns)\r\n      changeTile(randomRow, randomColumn)\r\n    }\r\n    //prevent case that it shuffles to the goal\r\n    //theoretically infinite recursion\r\n    if (checkWin()) {\r\n      shuffleBoard(shuffles)\r\n    }\r\n  }\r\n\r\n  function undoMove() {\r\n    //removes current board from history\r\n    if (history.length - 1 > 0) {\r\n      let tempHistory = history\r\n      tempHistory.pop()\r\n      setHistory([...tempHistory])\r\n    }\r\n  }\r\n\r\n  function checkWin() {\r\n    //simple win check\r\n    let win = true\r\n    const first = board[0][0]\r\n    for (let i = 0; i < columns && win; i++) {\r\n      for (let j = 0; j < rows && win; j++) {\r\n        win = first === board[i][j] ? true : false\r\n      }\r\n    }\r\n    return win\r\n  }\r\n  return (\r\n    <div className='board-wrapper'>\r\n      <div className='control-wrapper'>\r\n        <StyledButton\r\n          text={hasWon ? 'You did it!' : 'Shuffle'}\r\n          onClick={() => shuffleBoard(20)}\r\n        />\r\n        <StyledButton text={'Undo'} onClick={() => undoMove()} />\r\n      </div>\r\n      <div className={`board ${hasWon ? 'bg-green' : ''}`}>\r\n        {board.map((row, index) => (\r\n          <TileRow\r\n            rowNumber={index}\r\n            row={row}\r\n            onClick={changeTile}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Board = memo(_Board)\r\n","import React, { memo } from 'react'\r\nimport './Instruction.css'\r\nfunction _Instruction() {\r\n  return (\r\n    <div className='instruction-wrapper'>\r\n      <h2 className='instruction-header'>How to Play</h2>\r\n      <ul className='rules'>\r\n        <li>The goal of the game is to match the colors of all tiles</li>\r\n        <li>Click on each tile and the adjacent ones to change color</li>\r\n        <li>\r\n          Each change in color is following a determined order based on the\r\n          amount of chosen colors\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Instruction = memo(_Instruction)\r\n","import React, { memo } from 'react'\nimport './App.css'\nimport { Board } from './components/screens/Board/Board'\nimport { Instruction } from './components/screens/Instruction/Instruction'\nfunction _App() {\n  return (\n    <div className='app-wrapper'>\n      <Board /> <Instruction />\n    </div>\n  )\n}\n\nexport const App = memo(_App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}