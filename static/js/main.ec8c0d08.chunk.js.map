{"version":3,"sources":["components/screens/Board/Tile.js","components/screens/Board/TileRow.js","components/screens/Board/Board.js","App.js","index.js"],"names":["Tile","memo","color","onClick","className","style","background","TileRow","row","rowNumber","map","entry","index","key","Board","columns","rows","useState","board","setBoard","hasWon","setHasWon","manageColor","changeTile","column","tempBoard","length","checkWin","setTimeout","win","first","i","j","useEffect","push","initBoard","shuffleBoard","shuffles","Math","floor","random","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec8c0d08.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\nimport './Tile.css'\r\n\r\nfunction _Tile({ color, onClick }) {\r\n  return (\r\n    <div\r\n      className='tile'\r\n      style={{ background: color }}\r\n      onClick={() => onClick()}></div>\r\n  )\r\n}\r\n\r\nexport const Tile = memo(_Tile)\r\n","import React, { memo } from 'react'\r\nimport './TileRow.css'\r\nimport { Tile } from './Tile'\r\n\r\nfunction _TileRow({ row, rowNumber, onClick }) {\r\n  return (\r\n    <div className='tile-row-wrapper'>\r\n      {row.map((entry, index) => (\r\n        <Tile\r\n          color={entry}\r\n          onClick={() => onClick(rowNumber, index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\nexport const TileRow = memo(_TileRow)\r\n","import React, { memo, useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport { TileRow } from './TileRow'\r\n//TODO: win condition with reduce or filter\r\nfunction _Board({ columns = 3, rows = 3 }) {\r\n  const [board, setBoard] = useState([[]])\r\n  const [hasWon, setHasWon] = useState(false)\r\n  useEffect(() => {\r\n    initBoard(rows, columns)\r\n  }, [columns, rows])\r\n\r\n  function initBoard(rows, columns) {\r\n    let row = []\r\n    for (let i = 0; i < columns; i++) {\r\n      row.push('#7800ff')\r\n    }\r\n    let board = []\r\n    for (let i = 0; i < rows; i++) {\r\n      //...row copys row otherwise shallow copy\r\n      board.push([...row])\r\n    }\r\n\r\n    setBoard(board)\r\n  }\r\n  function manageColor(color) {\r\n    switch (color) {\r\n      case '#7800ff':\r\n        return '#FF7800'\r\n      case '#FF7800':\r\n        return '#00FF78'\r\n      case '#00FF78':\r\n        return '#7800ff'\r\n\r\n      default:\r\n        return 'black'\r\n    }\r\n  }\r\n  function changeTile(row, column) {\r\n    //deep copy of board\r\n    const tempBoard = [...board]\r\n    const columns = tempBoard[0].length\r\n    const rows = tempBoard.length\r\n    tempBoard[row][column] = manageColor(tempBoard[row][column])\r\n\r\n    if (row - 1 >= 0) {\r\n      tempBoard[row - 1][column] = manageColor(tempBoard[row - 1][column])\r\n    }\r\n    if (row + 1 < columns) {\r\n      tempBoard[row + 1][column] = manageColor(tempBoard[row + 1][column])\r\n    }\r\n    if (column - 1 >= 0) {\r\n      tempBoard[row][column - 1] = manageColor(tempBoard[row][column - 1])\r\n    }\r\n    if (column + 1 < rows) {\r\n      tempBoard[row][column + 1] = manageColor(tempBoard[row][column + 1])\r\n    }\r\n\r\n    setBoard(tempBoard)\r\n    const win = checkWin()\r\n    if (win) {\r\n      //flashes the background green and removes it afterwards\r\n      setHasWon(true)\r\n      setTimeout(() => setHasWon(false), 1000)\r\n    }\r\n  }\r\n\r\n  function shuffleBoard(shuffles) {\r\n    for (let i = 0; i < shuffles; i++) {\r\n      let randomRow = Math.floor(Math.random() * rows)\r\n      let randomColumn = Math.floor(Math.random() * columns)\r\n      changeTile(randomRow, randomColumn)\r\n    }\r\n    //prevent case that it shuffles to the goal\r\n    //theoretically infinite recursion\r\n    if (checkWin()) {\r\n      shuffleBoard(shuffles)\r\n    }\r\n  }\r\n  function checkWin() {\r\n    let win = true\r\n    const first = board[0][0]\r\n    for (let i = 0; i < columns && win; i++) {\r\n      for (let j = 0; j < rows && win; j++) {\r\n        win = first === board[i][j] ? true : false\r\n      }\r\n    }\r\n    return win\r\n  }\r\n  return (\r\n    <div className='board-wrapper'>\r\n      <div className={`shuffle-btn`} onClick={() => shuffleBoard(20)}>\r\n        {hasWon ? 'You did it!' : 'Shuffle'}\r\n      </div>\r\n      <div className={`board ${hasWon ? 'bg-green' : ''}`}>\r\n        {board.map((row, index) => (\r\n          <TileRow\r\n            rowNumber={index}\r\n            row={row}\r\n            onClick={changeTile}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Board = memo(_Board)\r\n","import React, { memo } from 'react'\nimport { Board } from './components/screens/Board/Board'\nimport './App.css'\nfunction _App() {\n  return <Board />\n}\n\nexport const App = memo(_App)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}